name: Build and Release Binaries

on:
  push:
    branches:
      - main

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3

      - name: Get Version
        id: get_version
        run: |
          version=$(grep '^version =' Cargo.toml | cut -d '"' -f 2)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

  build_and_upload:
    name: Build and Upload
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build binaries
        run: |
          cargo build --release --target ${{ matrix.target }} --bin jikand
          cargo build --release --target ${{ matrix.target }} --bin jk

      - name: Prepare assets
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/jikand release/jikand-${{ matrix.name }}
          cp target/${{ matrix.target }}/release/jk release/jk-${{ matrix.name }}

      - name: Upload Release Asset (jikand)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./release/jikand-${{ matrix.name }}
          asset_name: jikand-${{ matrix.name }}
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (jk)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./release/jk-${{ matrix.name }}
          asset_name: jk-${{ matrix.name }}
          asset_content_type: application/octet-stream

      - name: Generate checksum
        run: |
          cd release
          sha256sum jikand-${{ matrix.name }} jk-${{ matrix.name }} > checksum-${{ matrix.name }}.txt
          cd ..

      - name: Upload checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./release/checksum-${{ matrix.name }}.txt
          asset_name: checksum-${{ matrix.name }}.txt
          asset_content_type: text/plain
